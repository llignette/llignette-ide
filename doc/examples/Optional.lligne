
lligne.util: Package :: djot(
    ! The Lligne language core package with utility classes that have completely
    ! general purpose use.
    !   * Built-in and specially treated types.
    !   * Common functions.
    !   * Other stuff.
) &= (

    None: (T:Type) -> Type =
        fn(T) => (
            «noneTag»
        )

    Some: (T: Type) -> Type =
        fn(T) => (
            «someTag»,
            value: «Value»
        )

    Optional: (T: Type) -> Type =
        None(T)
        | Some(T)

    none: (T: Type) -> None(T) =
        fn(T) => (
            «noneTag»
        )

    eq: (T: Type, option1: Optional(T), option2: Optional(T)) -> Bool
    eq ??= fn(T: Type, option1: Optional(T), option2: Optional(T)) =>
            option1 is None(T) and option2 is None(T) or
            option1 is Some(T) and option2 is Some(T) and option1.value == option2.value

    exists: (T: Type, option: Optional(T), predicate: (value: T) -> boolean) -> Bool ??=
        fn(T, option, predicate) =>
            option is Some(T) and predicate(option.value)

    filter: (T: Type, option: Optional(T), predicate: (value: T) -> boolean) -> Optional(T) ??=
        fn(T, option, predicate) =>
            ◆ option when option is Some(T) and predicate(option.value)
            ◆ none otherwise

    isNone: (T: Type, option: Optional(T)) -> Bool ??=
        fn(T, option) =>
            option is None(T)

    isSome: (T: Type, option: Optional(T)) -> Bool ??=
        fn(T, option) =>
            option is Some(T)

    map: (T: Type, U: Type, option: Option(T), mapFn: (value: T) -> U): Option(U) ??=
        fn(T, U, option, mapFn) =>
            ◆ none(U) when option is None(T)
            ◆ some(mapFn(option.value)) otherwise

    match: (T: Type, U: Type, option: Option(T), dispatch: (ifNone: () -> U, ifSome: (value: T) -> U)): U ??=
        fn(T, U, option, dispatch) =>
            ◆ dispatch.ifNone() when option is None(T)
            ◆ dispatch.ifSome(option.value) otherwise

    some: (T: Type, value: T) -> «Some» ??=
        fn(T, value) => (
            «someTag»,
            value
        )

    toArray: (T: Type, option: Optional(T)) -> T[] ??=
        fn(option) ->
            ◆ [option.value] when option is «some»
            ◆ [] otherwise

    value: (T: Type, option: Optional(T), defaultValue: T) -> T ??=
        fn(option) ->
            ◆ option.value when option is «Some»
            ◆ defaultValue otherwise

    // TBD: toResult (value or error)

)
where (
    Value = T.name
    Optional = "Optional╢Value╟"
    None = "None╢Value╟"
    noneTag = "#╢Optional╟None"
    Some = "Some╢Value╟"
    someTag = "#╢Optional╟Some'"
)



// TODO: second type parameter

fun map(U: Type, option: Option, mapFn: (value: T) -> U): Option(U) =
    none() when option.tag == 'Option#None'
    | some(mapFn(option.value))

fun match(U: Type, option: Option, dispatch: { ifNone: () -> U, ifSome: (value: T) -> U }): U =
    dispatch.ifNone() when option.tag == 'Option#None'
    | dispatch.ifSome(option.value)


// Usage

doStuff = fn(x: OptionalInt32) ->
    x.value when x is SomeInt32
    | 0

m = (x: OptionalInt64) -> Float64 =
    fn(x) -> map(Float64, x, (xx) -> Float64.of(xx))


